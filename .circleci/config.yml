version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:10.15
    environment:
      IMAGE_NAME: mozilla/profilerserver

commands:
  checkout-and-dependencies:
    description: "Checkout and install dependencies, managing a cache"
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      # With --frozen-lockfile, the installation will fail if the lockfile is
      # outdated compared to package.json.
      - run: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}

workflows:
  version: 2
  master:
    jobs:
      - tests
      - lint
      - build
      - flow
      - docker
      - docker-publish:
          requires:
            - docker
          filters:
            branches:
              only:
                - master
                - production

jobs:
  lint:
    executor: node
    steps:
      - checkout-and-dependencies
      - run: yarn lint

  tests:
    executor: node
    steps:
      - checkout-and-dependencies
      - run: yarn test --runInBand

  flow:
    executor: node
    steps:
      - checkout-and-dependencies
      - run: yarn flow:ci

  build:
    executor: node
    steps:
      - checkout-and-dependencies
      - run: |
          yarn build:clean
          yarn build

  docker:
    executor: node
    steps:
      # This job doesn't need the cached node_modules because they'll be
      # redownloaded when building the docker image.
      - checkout
      # This sets up a remote environment that's necessary to run docker commands.
      - setup_remote_docker
      - run:
          name: "Build the Docker image"
          command: yarn docker:build --pull --build-arg circle_build_url=$CIRCLE_BUILD_URL
      - run:
          name: "Start the docker image in a container and check it's running"
          command: |
            yarn docker:run:detached
            # Wait up to 10 seconds that the server is launched.
            timeout 10s sh \<<'EOF'
            while ! docker exec profiler-server curl --silent --show-error --fail http://localhost:8000/__version__ ; do
              sleep 1
            done
            EOF
            yarn docker:stop
      - run:
          name: Archive Docker image
          command: docker save -o image.tar profiler-server:dev
      # This makes it possible to load this image from subsequent jobs.
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  docker-publish:
    executor: node
    steps:
      # Let's attach the workspace so that we can reload the saved image later.
      - attach_workspace:
          at: /tmp/workspace
      # This sets up a remote environment that's necessary to run docker commands.
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            # Use both a version tag depending on the circle's build number
            # and a latest tag that's depending on the branch name.
            IMAGE_VERSION_TAG="0.0.${CIRCLE_BUILD_NUM}"
            IMAGE_LATEST_TAG="${CIRCLE_BRANCH}-latest"
            docker tag profiler-server:dev $IMAGE_NAME:$IMAGE_LATEST_TAG
            docker tag profiler-server:dev $IMAGE_NAME:$IMAGE_VERSION_TAG

            # Deploy to docker hub using the environment variables passed from
            # CircleCI configuration.
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $IMAGE_NAME:$IMAGE_LATEST_TAG
            docker push $IMAGE_NAME:$IMAGE_TAG
