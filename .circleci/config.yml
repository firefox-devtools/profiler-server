version: 2.1

executors:
  node:
    docker:
      - image: cimg/node:22.14
    environment:
      IMAGE_NAME: mozilla/profiler-server

  # This executor is used for the python jobs (obviously). We want `pip` so that
  # we can install `flake8`. We use the node flavor so that we have `yarn`
  # preinstalled, but otherwise the exact version for node isn't important.
  python:
    docker:
      - image: cimg/python:3.13-node

orbs:
  shellcheck: circleci/shellcheck@3.0.0

commands:
  checkout-and-dependencies:
    description: 'Checkout and install dependencies, managing a cache'
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      # With --frozen-lockfile, the installation will fail if the lockfile is
      # outdated compared to package.json.
      - run: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}

workflows:
  version: 2
  # This is the main workflow, triggered for every push and PR.
  # Only docker-publish is triggered for push on the master and production
  # banches only.
  main:
    jobs:
      - tests
      - python
      - lint
      - build
      - yarn_lock
      - typescript
      - license-check
      - shellcheck/check:
          name: 'Shellcheck'
      - docker
      - docker-publish:
          requires:
            - docker
          filters:
            branches:
              only:
                - master
                - production
      - deploy-gar:  
          name: Deploy to GAR
          requires:
            - docker
          filters:
            branches:
              only:
                - master
                - production          
  # This is a weekly workflow, just to deploy new versions of the docker images,
  # so that updates to the underlying images are used and deployed.
  # This is configured to run on Thursdays (4th day in the week, Sunday is 0).
  weekly:
    triggers:
      - schedule:
          cron: '0 0 * * 4'
          filters:
            branches:
              only:
                - master
                - production
    jobs:
      - docker
      - docker-publish:
          requires:
            - docker

jobs:
  lint:
    executor: node
    steps:
      - checkout-and-dependencies
      - run: yarn lint-js
      - run: yarn prettier-run

  tests:
    executor: node
    steps:
      - checkout-and-dependencies
      - run: yarn test --runInBand

  python:
    executor: python
    steps:
      - checkout
      # This job needs flake8 to lint python code, let's install it here only
      # It's fairly quick (2s) so we won't try to cache it.
      - run: pip install --user flake8
      - run: yarn test-python
      - run: yarn lint-python

  typescript:
    executor: node
    steps:
      - checkout-and-dependencies
      - run: yarn ts

  yarn_lock:
    executor: node
    steps:
      - checkout-and-dependencies
      - run: yarn test-lockfile

  build:
    executor: node
    steps:
      - checkout-and-dependencies
      - run: |
          yarn build:clean
          yarn build

  license-check:
    executor: node
    steps:
      - checkout-and-dependencies
      - run: yarn license-check

  docker:
    executor: node
    steps:
      - checkout-and-dependencies
      # This sets up a remote environment that's necessary to run docker commands.
      - setup_remote_docker
      - run:
          name: 'Build the Docker image'
          command: yarn docker:build --pull --build-arg circle_build_url=$CIRCLE_BUILD_URL
      - run:
          name: "Start the docker image in a container and check it's running"
          command: |
            cp .env.example .env
            yarn docker:run:detached
            # Wait up to 10 seconds that the server is launched.
            timeout 10s sh \<<'EOF'
            while ! docker exec profiler-server curl -i --silent --show-error --fail http://localhost:8000/__version__ ; do
              sleep 1
            done
            EOF
            yarn docker:stop
      - run:
          name: Archive Docker image
          command: docker save -o image.tar profiler-server:dev
      # This makes it possible to load this image from subsequent jobs.
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  docker-publish:
    executor: node
    steps:
      # Let's attach the workspace so that we can reload the saved image later.
      - attach_workspace:
          at: /tmp/workspace
      # This sets up a remote environment that's necessary to run docker commands.
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            # Use both a version tag depending on the circle's build number
            # and a latest tag that's depending on the branch name.
            # Please keep the version in sync with the version file generated in
            # bin/generate-version-file.js.
            IMAGE_VERSION_TAG="0.0.${CIRCLE_BUILD_NUM}"
            IMAGE_LATEST_TAG="${CIRCLE_BRANCH}-latest"
            docker tag profiler-server:dev $IMAGE_NAME:$IMAGE_LATEST_TAG
            docker tag profiler-server:dev $IMAGE_NAME:$IMAGE_VERSION_TAG

            # Deploy to docker hub using the environment variables passed from
            # CircleCI configuration.
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $IMAGE_NAME:$IMAGE_LATEST_TAG
            docker push $IMAGE_NAME:$IMAGE_VERSION_TAG
  deploy-gar:
    executor: gcp-gcr/default
    parameters:
      build_tag:
        type: string
        default: build
      image:
        type: string
        default: firefoxprofiler
      registry-url:
        type: string
        default: us-docker.pkg.dev
    steps:
      # gcr-auth parameters:
      # https://circleci.com/developer/orbs/orb/circleci/gcp-gcr#commands-gcr-auth
      - gcp-gcr/gcr-auth:
          gcp_cred_config_file_path: ~/gcp_cred_config.json
          google-project-id: GCP_GAR_PROJECT_ID
          google_project_number: GCP_OIDC_PROJECT_NUMBER
          registry-url: <<parameters.registry-url>>
          service_account_email: GCP_OIDC_SERVICE_ACCOUNT_EMAIL
          use_oidc: true
          workload_identity_pool_id: GCP_OIDC_WIP_ID
          workload_identity_pool_provider_id: GCP_OIDC_WIP_PROVIDER_ID
      - attach_workspace:
          at: /tmp/cache
      - run:
          name: Restore Docker image cache
          command: docker load -i /tmp/cache/<<parameters.image>>.tar
      # This is the easiest way to tag multiple images using different
      # conditions for the GAR_TAG variable in the smallest amount of code.
      #
      # You can find other jobs and commands you can use with this orb that
      # include tagging here:
      # https://circleci.com/developer/orbs/orb/circleci/gcp-gcr
      - run:
          name: Tag image
          command: |
            if [ ! -z "${CIRCLE_TAG}" ]; then
              echo "export GAR_TAG=${CIRCLE_TAG}" >> $BASH_ENV
            else
              echo "export GAR_TAG=${CIRCLE_BRANCH}" >> $BASH_ENV
            fi
              echo "export GAR_IMAGE=\"<<parameters.registry-url>>/${GCP_GAR_PROJECT_ID}/${GCP_GAR_REPO}/<<parameters.image>>\"" >> $BASH_ENV
              source $BASH_ENV
              IMAGE_VERSION_TAG="0.0.${CIRCLE_BUILD_NUM}"
              IMAGE_LATEST_TAG="${CIRCLE_BRANCH}-latest"   

              docker tag <<parameters.image>> $GAR_IMAGE:$IMAGE_VERSION_TAG
              docker tag <<parameters.image>> $GAR_IMAGE:$IMAGE_LATEST_TAG
      # push-image parameters:
      # https://circleci.com/developer/orbs/orb/circleci/gcp-gcr#commands-push-image
      - gcp-gcr/push-image:
          image: "${GCP_GAR_REPO}/<<parameters.image>>"
          google-project-id: GCP_GAR_PROJECT_ID
          registry-url: <<parameters.registry-url>>
          tag: $IMAGE_VERSION_TAG,$IMAGE_VERSION_TAG            
